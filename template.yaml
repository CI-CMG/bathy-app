AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  resources supporting the bathy extract system to subset and (optionally) grid CSB and multibeam data

Parameters:
  EnvType:
    Description: Environment type.
    Default: prod
    Type: String
    AllowedValues: [prod, dev, test]
    ConstraintDescription: must specify prod, dev, or test.

Conditions:
  CreateTestResources: !Equals [!Ref EnvType, test]

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Handler: app.lambda_handler
    Runtime: python3.9
    Environment:
      Variables:
        LOGLEVEL: WARNING
        ORDERS_TABLE: "bathy-orders"
        ATHENA_DATABASE: "dcdb"
        ATHENA_TABLE: "csb_parquet"
        ATHENA_OUTPUT_BUCKET: "s3://order-pickup/"
Resources:
  AutogridApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: !If [CreateTestResources, 'test instance of Autogrid API', 'Autogrid API']
      Tags:
        project: "bathymetry"
        stage: "test"
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
        AllowMethods:
          - GET
          - POST
          - OPTIONS

  #
  # Functions
  #
  CreateOrderFunction:
    Type: AWS::Serverless::Function
#    DependsOn: AutogridApi
    Properties:
      CodeUri: create_order/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      Description: "create a new order"
      Tags:
        project: "bathymetry"
#      Environment:
#        Variables:
# TODO work around circular dependency
#          ORDER_ENDPOINT_URL: !Sub "${AutogridApi.ApiEndpoint}/order/"
      Timeout: 3
      Handler: app.lambda_handler
      Events:
        bathy:
          Type: HttpApi
          Properties:
            ApiId: !Ref AutogridApi
            Path: /order
            Method: post

  OrderStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: order_status/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      Description: "report on the status of given order"
      Tags:
        project: "bathymetry"
      Events:
        csb:
          Type: HttpApi
          Properties:
            ApiId: !Ref AutogridApi
            Path: /order/{proxy+}
            Method: get

  MultibeamCatalogFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: multibeam_catalog_query/
        Role: arn:aws:iam::282856304593:role/csb-pilot-role
        Description: "placeholder which mocks the querying of MB catalog"
        Tags:
          project: "bathymetry"
        Environment:
          Variables:
            MY_AWS_REGION: !Ref AWS::Region
            # TODO replace w/ variable
            OUTPUT_BUCKET: "csb-pilot-delivery"
            CATALOG_URL: "https://gis.ngdc.noaa.gov/mapviewer-support/multibeam/catalog.groovy"
        Events:
          multibeamCatalogQueryEvent:
            Type: SQS
            Properties:
              Queue: !GetAtt MultibeamCatalogQueue.Arn
              Enabled: true

  DatasetErrorHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dataset_error_handler/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      Description: "handle errors in the dataset-specific section of StepFunction"
      Tags:
        project: "bathymetry"

  OrderErrorHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: order_error_handler/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      Description: "handle errors in the order-specific section of StepFunction"
      Tags:
        project: "bathymetry"

  FormatPointQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: format_point_query/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      Description: "construct the SQL used by Athena to extract CSB points"
      Tags:
        project: "bathymetry"

  InitializeOrderRecordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: insert_order_record/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      Description: "insert a new order record into the order tracking table"
      Tags:
        project: "bathymetry"

  UpdateDatasetRecordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update_dataset_record/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      Description: "update the status of the dataset into the order tracking table"
      Tags:
        project: "bathymetry"

  VerifyDatasetStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: verify_dataset_status/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      Description: "verify all datasets in order are staged and ready for processing or delivery"
      Tags:
        project: "bathymetry"

  SendEmailViaRelayFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: send_email_via_relay/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      Description: "send email message via NCIS email relay"
      VpcConfig:
        SecurityGroupIds:
          - sg-0220bb1b0f1717bd8
        SubnetIds:
          - subnet-00046143f1dcc8109
      Tags:
        project: "bathymetry"
      Events:
        orderNotificationEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt OrderNotificationQueue.Arn
            Enabled: true

#  ReprocessCsbDataFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: reprocess_csb_data/
#      Role: arn:aws:iam::282856304593:role/csb-pilot-role
#      Description: "used by S3 Batch Operations to modify and partition original BDP data into new files"
#      Timeout: 180
#      Tags:
#        project: "csb-pilot"
  #
  # State Machine
  #
  BathymetryStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/bathy_order_processor.asl.json
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      DefinitionSubstitutions:
        MultibeamCatalogQueueUrl: !Ref MultibeamCatalogQueue
        OrderNotificationQueueUrl: !Ref OrderNotificationQueue
        GridDataQueueUrl: !Ref GridDataQueue
        UpdateDatasetRecordFunctionArn: !GetAtt UpdateDatasetRecordFunction.Arn
        InitializeOrderRecordFunctionArn: !GetAtt InitializeOrderRecordFunction.Arn
        FormatPointQueryFunctionArn: !GetAtt FormatPointQueryFunction.Arn
        DatasetErrorHandlerFunctionArn: !GetAtt DatasetErrorHandlerFunction.Arn
        OrderErrorHandlerFunctionArn: !GetAtt OrderErrorHandlerFunction.Arn
#        MultibeamCatalogFunctionArn: !GetAtt MultibeamCatalogFunction.Arn
        VerifyDatasetStatusFunctionArn: !GetAtt VerifyDatasetStatusFunction.Arn
        AthenaOutputBucket: "s3://csb-pilot-delivery/"

  #
  # Queues
  #
  MultibeamCatalogQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !If [CreateTestResources, 'MultibeamCatalogQueue-test', 'MultibeamCatalogQueue']
      Tags:
        - Key: project
          Value: "bathymetry"
        - Key: stack-name
          Value: !Ref AWS::StackName
        - Key: env-type
          Value: !Ref EnvType

  OrderNotificationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !If [ CreateTestResources, 'OrderNotificationQueue-test', 'OrderNotificationQueue' ]
      Tags:
        - Key: project
          Value: "bathymetry"
        - Key: stack-name
          Value: !Ref AWS::StackName
        - Key: env-type
          Value: !Ref EnvType

  GridDataQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !If [ CreateTestResources, 'GridDataQueue-test', 'GridDataQueue' ]
      Tags:
        - Key: project
          Value: "csb-pilot"
        - Key: stack-name
          Value: !Ref AWS::StackName
        - Key: env-type
          Value: !Ref EnvType

Outputs:
  AutogridApiUrl:
    Description: "API endpoint for orders"
    Value: !Sub "${AutogridApi.ApiEndpoint}/order/"
  EnvType:
    Description: "EnvironmentType"
    Value: !Ref EnvType
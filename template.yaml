AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Create resources supporting the bathy extract system to subset and grid CSB and multibeam data

Parameters:
  EnvType:
    Description: Environment type.
    Default: prod
    Type: String
    AllowedValues: [prod, dev, test]
    ConstraintDescription: must specify prod, dev, or test.

Conditions:
  CreateTestResources: !Equals [!Ref EnvType, test]

# global tags applied via samconfig.toml profiles
Globals:
  Function:
    Timeout: 3
    Handler: app.lambda_handler
    Runtime: python3.9
    Environment:
      Variables:
        LOGLEVEL: WARNING
        ORDERS_TABLE: !Ref OrderTrackingTable
        ATHENA_DATABASE: "dcdb"
        ATHENA_TABLE: "csb_parquet"
        ATHENA_OUTPUT_BUCKET: "s3://order-pickup/"
        CONFIG_ENVIRONMENT: !If [CreateTestResources, 'TEST', 'PROD']
Resources:
  AutogridApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: !If [CreateTestResources, 'test instance of Autogrid API', 'Autogrid API']
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
        AllowMethods:
          - GET
          - POST
          - OPTIONS

  #
  # Functions
  #
  CreateOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create_order/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      Description: "create a new order"
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref BathymetryStateMachine
      Timeout: 3
      Handler: app.lambda_handler
      Events:
        bathy:
          Type: HttpApi
          Properties:
            ApiId: !Ref AutogridApi
            Path: /order
            Method: post

  OrderStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: order_status/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      Description: "report on the status of given order"
      Events:
        csb:
          Type: HttpApi
          Properties:
            ApiId: !Ref AutogridApi
# TODO use {orderid} instead of {proxy+}?
            Path: /order/{proxy+}
            Method: get

  MultibeamCatalogFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: multibeam_catalog_query/
        Role: arn:aws:iam::282856304593:role/csb-pilot-role
        Description: "queries the ArcGIS mapservice to get a list of multibeam files matching the filter parameters"
        Environment:
          Variables:
            # TODO replace w/ variable
            OUTPUT_BUCKET: "csb-pilot-delivery"
            CATALOG_URL: "https://gis.ngdc.noaa.gov/arcgis/rest/services/test/MB_files_test/MapServer/0/query"
        Events:
          multibeamCatalogQueryEvent:
            Type: SQS
            Properties:
              Queue: !GetAtt MultibeamCatalogQueue.Arn
              Enabled: true

  DatasetErrorHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dataset_error_handler/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      Description: "handle errors in the dataset-specific section of StepFunction"

  OrderErrorHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: order_error_handler/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      Description: "handle errors in the order-specific section of StepFunction"

  OrderSuccessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: order_success/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      Description: "update database and format notification message when order succeeds"

  FormatPointQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: format_point_query/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      Description: "construct the SQL used by Athena to extract CSB points"

  InitializeOrderRecordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: insert_order_record/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      Description: "insert a new order record into the order tracking table"

  InitializeDatasetRecordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: insert_dataset_record/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      Description: "insert a new dataset record into the order tracking table"

  UpdateDatasetRecordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update_dataset_record/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      Description: "update the status of the dataset into the order tracking table"

  VerifyDatasetStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: verify_dataset_status/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      Description: "verify all datasets in order are staged and ready for processing or delivery"

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role

  SendEmailViaRelayFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: send_email_via_relay/
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      Description: "send email message via NCIS email relay"
      Environment:
        Variables:
          #SENDER: "bathydata@iho.int"
          SENDER: "mb.info@noaa.gov"
      VpcConfig:
        SecurityGroupIds:
          - sg-0220bb1b0f1717bd8
        SubnetIds:
          - subnet-00046143f1dcc8109
      Events:
        orderNotificationEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt OrderNotificationQueue.Arn
            Enabled: true

  #
  # State Machine
  #
  BathymetryStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/bathy_order_processor.asl.json
      Role: arn:aws:iam::282856304593:role/csb-pilot-role
      DefinitionSubstitutions:
        MultibeamCatalogQueueUrl: !Ref MultibeamCatalogQueue
        OrderNotificationQueueUrl: !Ref OrderNotificationQueue
        GridDataQueueUrl: !Ref GridDataQueue
        UpdateDatasetRecordFunctionArn: !GetAtt UpdateDatasetRecordFunction.Arn
        InitializeOrderRecordFunctionArn: !GetAtt InitializeOrderRecordFunction.Arn
        InitializeDatasetRecordFunctionArn: !GetAtt InitializeDatasetRecordFunction.Arn
        FormatPointQueryFunctionArn: !GetAtt FormatPointQueryFunction.Arn
        DatasetErrorHandlerFunctionArn: !GetAtt DatasetErrorHandlerFunction.Arn
        OrderErrorHandlerFunctionArn: !GetAtt OrderErrorHandlerFunction.Arn
        OrderSuccessFunctionArn: !GetAtt OrderSuccessFunction.Arn
#        MultibeamCatalogFunctionArn: !GetAtt MultibeamCatalogFunction.Arn
        VerifyDatasetStatusFunctionArn: !GetAtt VerifyDatasetStatusFunction.Arn
        AthenaOutputBucket: "s3://order-pickup/"
        OrderTrackingTable: !Ref OrderTrackingTable


  #
  # Queues
  #
  MultibeamCatalogQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !If [CreateTestResources, 'MultibeamCatalogQueue-test', 'MultibeamCatalogQueue']
      Tags:
        - Key: stack-name
          Value: !Ref AWS::StackName
        - Key: env-type
          Value: !Ref EnvType

  OrderNotificationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !If [ CreateTestResources, 'OrderNotificationQueue-test', 'OrderNotificationQueue' ]
      Tags:
        - Key: stack-name
          Value: !Ref AWS::StackName
        - Key: env-type
          Value: !Ref EnvType

  GridDataQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !If [ CreateTestResources, 'GridDataQueue-test', 'GridDataQueue' ]
      Tags:
        - Key: stack-name
          Value: !Ref AWS::StackName
        - Key: env-type
          Value: !Ref EnvType

#
# DynamoDB Tables
#
  OrderTrackingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !If [ CreateTestResources, 'bathy-orders-test', 'bathy-orders' ]
      Tags:
        - Key: stack-name
          Value: !Ref AWS::StackName
        - Key: env-type
          Value: !Ref EnvType

      AttributeDefinitions:
        -
          AttributeName: "PK"
          AttributeType: "S"
        -
          AttributeName: "SK"
          AttributeType: "S"

      KeySchema:
        -
          AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"

      BillingMode: "PAY_PER_REQUEST"

Outputs:
  AutogridApiUrl:
    Description: "API endpoint for orders"
    Value: !Sub "${AutogridApi.ApiEndpoint}/order/"
  EnvType:
    Description: "EnvironmentType"
    Value: !Ref EnvType
  StateMachineArn:
    Description: "Arn for Step Function"
    Value: !Ref BathymetryStateMachine
  OrderTrackingTable:
    Value: !Ref OrderTrackingTable
